package no.ntnu.idata2900.project.esg_module_backend.sources;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Random;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import no.ntnu.idata2900.project.esg_module_backend.DataSimulator;
import no.ntnu.idata2900.project.esg_module_backend.dtos.TripDto;
import no.ntnu.idata2900.project.esg_module_backend.generators.DataPointGenerator;
import no.ntnu.idata2900.project.esg_module_backend.models.Trip;
import no.ntnu.idata2900.project.esg_module_backend.models.data_points.DataPoint;
import no.ntnu.idata2900.project.esg_module_backend.models.data_points.Fuel;
import no.ntnu.idata2900.project.esg_module_backend.models.data_points.Position;
import no.ntnu.idata2900.project.esg_module_backend.models.data_points.Vessel;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * The FakeDataSource class simulates a data source to produce boat-related data at intervals.
 * It implements the DataSource interface and sends generated ship data to a DataListener.
 * This class is primarily designed for testing or simulation purposes where no actual data source exists.
 *
 * @author Group 14
 * @version v0.2.1 (2025.05.05)
 */
@Component
public class FakeDataSource implements DataSource {
  private ScheduledExecutorService scheduler;
  private DataListener listener;
  private int i = 0;

  private final DataPointGenerator generator;
  private DataPoint currentDp = null;

  @Autowired
  public FakeDataSource(DataPointGenerator generator) {
    this.generator = generator;
  }

  @Override
  public void start(Trip trip) {

    currentDp = generator.generate(currentDp, trip);

    // Make sure any existing scheduler is shut down
    if (scheduler != null && !scheduler.isShutdown()) {
      scheduler.shutdownNow();
    }

    scheduler = Executors.newSingleThreadScheduledExecutor();

    scheduler.scheduleAtFixedRate(() -> {
      if (i < 200) {
          if (listener != null) {
            currentDp = generator.generate(currentDp, trip);
            listener.onDataReceived(currentDp);
          }
          i = (i + 1);
      } else {
        stop();
      }
    }, 0, 15, TimeUnit.SECONDS);

    System.out.println("FakeDataSource started");
  }

  @Override
  public void stop() {
    if (scheduler != null && !scheduler.isShutdown()) {
      scheduler.shutdownNow();
      scheduler = null;
    }

    i = 0;
    System.out.println("FakeDataSource stopped");
  }


  /**
   * Sets the data listener for this data source.
   * This listener will be notified whenever new data, such as a {@link DataPoint},
   * is generated by the fake data source. The assigned listener must implement
   * the {@link DataListener} interface, with its {@code onDataReceived} method
   * being invoked upon data updates.
   *
   * @param listener The {@link DataListener} instance to receive updated ship data.
   */
  @Override
  public void setDataListener(DataListener listener) {
    this.listener = listener;
    System.out.println("FakeDataSource sending data");
  }
}
